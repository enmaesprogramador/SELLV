// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using SELLVAPI.Utils.ValuesGenerators;

namespace SELLVAPI.DataAccess.Models;

public partial class SELLVDBContext : DbContext
{
    public SELLVDBContext()
    {
    }

    public SELLVDBContext(DbContextOptions<SELLVDBContext> options)
        : base(options)
    {
        SavingChanges += FUEL_DISPATCH_DBContext_SavingChanges;
    }

    private static void GenerateOnUpdate(EntityEntry entry)
    {
        foreach (var property in entry.Properties)
        {
            if (!(property.Metadata.ValueGenerated == ValueGenerated.OnUpdateSometimes ||
                property.Metadata.ValueGenerated == ValueGenerated.OnUpdate ||
                property.Metadata.ValueGenerated == ValueGenerated.OnAddOrUpdate))
                continue;

            var valueGeneratorFactory = property.Metadata.GetValueGeneratorFactory();

            if (valueGeneratorFactory == null)
                continue;

            property.CurrentValue =
                valueGeneratorFactory.
                Invoke(property.Metadata,
                entry.Metadata)
                .Next(entry);
        }
    }
    private void FUEL_DISPATCH_DBContext_SavingChanges(object? sender, SavingChangesEventArgs e)
    {
        var changes = ChangeTracker
            .Entries()
            .ToList();

        changes.ForEach(e =>
        {
            if (e.State == EntityState.Modified || e.State == EntityState.Added)
                GenerateOnUpdate(e);
        });
    }

    public virtual DbSet<Barcode> Barcodes { get; set; }

    public virtual DbSet<CashMovement> CashMovements { get; set; }

    public virtual DbSet<CashRegister> CashRegisters { get; set; }

    public virtual DbSet<CashRegisterSession> CashRegisterSessions { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<InvoicesDetail> InvoicesDetails { get; set; }

    public virtual DbSet<InvoicesHeader> InvoicesHeaders { get; set; }

    public virtual DbSet<Measurement> Measurements { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductsCategory> ProductsCategories { get; set; }

    public virtual DbSet<ProductsSubCategory> ProductsSubCategories { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RolePermission> RolePermissions { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<Taxe> Taxes { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UsersToken> UsersTokens { get; set; }

    public virtual DbSet<WareHouse> WareHouses { get; set; }

    public virtual DbSet<WareHouseEntrance> WareHousesEntrances { get; set; }

    public virtual DbSet<WareHouseExit> WareHousesExits { get; set; }

    public virtual DbSet<WareHouseTransfer> WareHousesTransfers { get; set; }

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=ENMANUEL;Initial Catalog=SELLVDB;Persist Security Info=True;User ID=sa;Password=B1Admin@;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Barcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Barcodes__3214EC075FCC3817");

            entity.Property(e => e.Code).HasMaxLength(200);

            entity.HasOne(d => d.Company).WithMany(p => p.Barcodes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Barcodes__Compan__6E01572D");

            entity.HasOne(d => d.Product).WithMany(p => p.Barcodes)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Barcodes__Produc__6D0D32F4");
        });

        modelBuilder.Entity<CashMovement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CashMove__3214EC076C79A527");

            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.MovementType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.CashRegisterSession).WithMany(p => p.CashMovements)
                .HasForeignKey(d => d.CashRegisterSessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CashMovem__CashR__42E1EEFE");

            entity.HasOne(d => d.Company).WithMany(p => p.CashMovements)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CashMovem__Compa__44CA3770");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CashMovementCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__CashMovem__Creat__46B27FE2");

            entity.HasOne(d => d.RelatedInvoice).WithMany(p => p.CashMovements)
                .HasForeignKey(d => d.RelatedInvoiceId)
                .HasConstraintName("FK__CashMovem__Relat__43D61337");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.CashMovementUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__CashMovem__Updat__47A6A41B");
        });

        modelBuilder.Entity<CashRegister>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CashRegi__3214EC07B87DB30D");

            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Company).WithMany(p => p.CashRegisters)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CashRegis__Compa__09A971A2");
        });

        modelBuilder.Entity<CashRegisterSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CashRegi__3214EC077C1325DB");

            entity.Property(e => e.ClosingAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ClosingTime).HasColumnType("datetime");
            entity.Property(e => e.OpeningAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OpeningTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.CashRegister).WithMany(p => p.CashRegisterSessions)
                .HasForeignKey(d => d.CashRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CashRegis__CashR__0F624AF8");

            entity.HasOne(d => d.ClosedByNavigation).WithMany(p => p.CashRegisterSessionClosedByNavigations)
                .HasForeignKey(d => d.ClosedBy)
                .HasConstraintName("FK__CashRegis__Close__0E6E26BF");

            entity.HasOne(d => d.Company).WithMany(p => p.CashRegisterSessions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CashRegis__Compa__10566F31");

            entity.HasOne(d => d.OpenedByNavigation).WithMany(p => p.CashRegisterSessionOpenedByNavigations)
                .HasForeignKey(d => d.OpenedBy)
                .HasConstraintName("FK__CashRegis__Opene__0D7A0286");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Companie__3214EC07460B30E7");
            entity.ToTable("Companies");
            entity.Property(e => e.CountryCode).HasMaxLength(10);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ObjectType).HasMaxLength(50);
            entity.Property(e => e.Phone1).HasMaxLength(20);
            entity.Property(e => e.Phone2).HasMaxLength(20);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CompanyCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Companies__Creat__29572725");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.CompanyUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Companies__Updat__2A4B4B5E");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Customer__3214EC0789FC170E");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EmailAddress).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Customers__Compa__03F0984C");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.CustomerCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Customers__Creat__05D8E0BE");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.CustomerUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Customers__Updat__06CD04F7");
        });

        modelBuilder.Entity<InvoicesDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Invoices__3214EC07C420A32F");

            entity.Property(e => e.Discount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ItbisTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ProductCode).HasMaxLength(150);
            entity.Property(e => e.ProductDescription).HasMaxLength(150);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscount).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Company).WithMany(p => p.InvoicesDetails)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__InvoicesD__Compa__1F98B2C1");

            entity.HasOne(d => d.InvoiceHeader).WithMany(p => p.InvoicesDetails)
                .HasForeignKey(d => d.InvoiceHeaderId)
                .HasConstraintName("FK__InvoicesD__Invoi__1DB06A4F");

            entity.HasOne(d => d.Product).WithMany(p => p.InvoicesDetails)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__InvoicesD__Produ__1CBC4616");

            entity.HasOne(d => d.Tax).WithMany(p => p.InvoicesDetails)
                .HasForeignKey(d => d.TaxId)
                .HasConstraintName("FK__InvoicesD__TaxId__1EA48E88");
        });

        modelBuilder.Entity<InvoicesHeader>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Invoices__3214EC07D8E03CAD");

            entity.Property(e => e.ClientName).HasMaxLength(100);
            entity.Property(e => e.ClientRnc).HasMaxLength(50);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.GeneralAmount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SubTotal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Total).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.CashRegisterSession).WithMany(p => p.InvoicesHeaders)
                .HasForeignKey(d => d.CashRegisterSessionId)
                .HasConstraintName("FK__InvoicesH__CashR__151B244E");

            entity.HasOne(d => d.Company).WithMany(p => p.InvoicesHeaders)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__InvoicesH__Compa__160F4887");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InvoicesHeaderCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__InvoicesH__Creat__17F790F9");

            entity.HasOne(d => d.Customer).WithMany(p => p.InvoicesHeaders)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__InvoicesH__Custo__14270015");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.InvoicesHeaderUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__InvoicesH__Updat__18EBB532");

            entity.HasOne(d => d.User).WithMany(p => p.InvoicesHeaderUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__InvoicesH__UserI__1332DBDC");
        });

        modelBuilder.Entity<Measurement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Measurem__3214EC071EF70AAA");

            entity.HasIndex(e => e.Name, "UQ__Measurem__737584F66F1B3E9B").IsUnique();

            entity.HasIndex(e => e.Symbol, "UQ__Measurem__B7CC3F01129BC63A").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Symbol)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.Measurements)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Measureme__Compa__5DCAEF64");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.MeasurementCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Measureme__Creat__5FB337D6");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.MeasurementUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Measureme__Updat__60A75C0F");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Payments__3214EC07BB281DCF");

            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.CashRegisterSession).WithMany(p => p.Payments)
                .HasForeignKey(d => d.CashRegisterSessionId)
                .HasConstraintName("FK__Payments__CashRe__3C34F16F");

            entity.HasOne(d => d.Company).WithMany(p => p.Payments)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payments__Compan__3D2915A8");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PaymentCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Payments__Create__3F115E1A");

            entity.HasOne(d => d.InvoiceHeader).WithMany(p => p.Payments)
                .HasForeignKey(d => d.InvoiceHeaderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payments__Invoic__3B40CD36");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.Payments)
                .HasForeignKey(d => d.PaymentMethodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Payments__Paymen__3A4CA8FD");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.PaymentUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Payments__Update__40058253");
        });

        modelBuilder.Entity<PaymentMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PaymentM__3214EC07085D7216");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.PaymentMethods)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentMe__Compa__787EE5A0");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PaymentMethodCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__PaymentMe__Creat__7A672E12");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.PaymentMethodUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__PaymentMe__Updat__7B5B524B");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Permissi__3214EC073E971C32");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.Permissions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Permissio__Compa__3C69FB99");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.PermissionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Permissio__Creat__3E52440B");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.PermissionUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Permissio__Updat__3F466844");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Products__3214EC0759709335");

            entity.HasIndex(e => e.BarCode, "UQ__Products__8A2ACA9BAEEF6AC1").IsUnique();

            entity.HasIndex(e => e.Code, "UQ__Products__A25C5AA77A3AA847").IsUnique();

            entity.Property(e => e.BarCode).HasMaxLength(120);
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(150);

            entity.Property(x => x.CompanyId)
                  .ValueGeneratedOnAdd()
                  .HasValueGenerator<CompanyIdGenerator>()
                  .Metadata.SetAfterSaveBehavior(PropertySaveBehavior.Save);

            entity.Property(x => x.CreatedBy)
                  .ValueGeneratedOnAdd()
                  .HasValueGenerator<UserIdGenerator>()
                  .Metadata.SetAfterSaveBehavior(PropertySaveBehavior.Save);


            entity.Property(x => x.UpdatedBy)
                  .ValueGeneratedOnAdd()
                  .HasValueGenerator<UserIdGenerator>()
                  .Metadata.SetAfterSaveBehavior(PropertySaveBehavior.Save);

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Products__Catego__656C112C");

            entity.HasOne(d => d.Company).WithMany(p => p.Products)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Products__Compan__6754599E");

            entity.HasOne(d => d.CreatedByNavigation)
            .WithMany(p => p.ProductCreatedByNavigations)
            .HasForeignKey(d => d.CreatedBy);



            entity.HasOne(d => d.Measurement).WithMany(p => p.Products)
                  .HasForeignKey(d => d.MeasurementId)
                  .OnDelete(DeleteBehavior.ClientSetNull)
                  .HasConstraintName("FK__Products__Measur__66603565");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.ProductUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Products__Update__6A30C649");
        });

        modelBuilder.Entity<ProductsCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Products__3214EC0719227B52");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");


            entity.Property(x => x.CreatedBy)
                  .HasValueGenerator<UserIdGenerator>()
                  .ValueGeneratedOnAdd()
                  .Metadata.SetBeforeSaveBehavior(PropertySaveBehavior.Save);

            entity.Property(x => x.UpdatedBy)
                  .HasValueGenerator<UserIdGenerator>()
                  .ValueGeneratedOnAdd()
                  .Metadata.SetBeforeSaveBehavior(PropertySaveBehavior.Save);

            entity.HasOne(d => d.Company).WithMany(p => p.ProductsCategories)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductsC__Compa__4F7CD00D");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ProductsCategoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__ProductsC__Creat__5165187F");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.ProductsCategoryUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__ProductsC__Updat__52593CB8");
        });

        modelBuilder.Entity<ProductsSubCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Products__3214EC077CAEA30B");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.ProductsSubCategories)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductsS__Compa__5629CD9C");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.ProductsSubCategoryCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__ProductsS__Creat__5812160E");

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.ProductsSubCategories)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductsS__Produ__5535A963");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.ProductsSubCategoryUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__ProductsS__Updat__59063A47");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roles__3214EC07DB445CEF");

            entity.HasIndex(e => e.Name, "UQ__Roles__737584F63178B26A").IsUnique();

            entity.Property(e => e.Name).HasMaxLength(50);

            entity.HasOne(d => d.Company).WithMany(p => p.Roles)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Roles__CompanyId__31EC6D26");
        });

        modelBuilder.Entity<RolePermission>(entity =>
        {
            entity.HasKey(e => new { e.RoleId, e.PermissionId }).HasName("PK__RolePerm__6400A1A821B6B035");

            entity.ToTable("RolePermission");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.RolePermissions)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolePermi__Compa__440B1D61");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.RolePermissionCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__RolePermi__Creat__45F365D3");

            entity.HasOne(d => d.Permission).WithMany(p => p.RolePermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolePermi__Permi__4316F928");

            entity.HasOne(d => d.Role).WithMany(p => p.RolePermissions)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__RolePermi__RoleI__4222D4EF");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.RolePermissionUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__RolePermi__Updat__46E78A0C");
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.HasKey(e => new { e.ProductId, e.WareHouseId }).HasName("PK__Stocks__22933ECAA995C1CD");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Stocks__CompanyI__72C60C4A");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.StockCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Stocks__CreatedB__74AE54BC");

            entity.HasOne(d => d.Product).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Stocks__ProductI__70DDC3D8");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.StockUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Stocks__UpdatedB__75A278F5");

            entity.HasOne(d => d.WareHouse).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.WareHouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Stocks__WareHous__71D1E811");
        });

        modelBuilder.Entity<Taxe>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Taxes__3214EC072AF7D11A");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Percentage).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.Taxes)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Taxes__CompanyId__7E37BEF6");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.TaxisCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__Taxes__CreatedBy__00200768");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.TaxisUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__Taxes__UpdatedBy__01142BA1");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("Users");
            entity.HasKey(e => e.Id);


            entity.HasMany(r => r.Roles)
            .WithMany(d => d.Users)
            .UsingEntity<UserRole>(x => x.HasOne(x => x.Role)
            .WithMany().HasForeignKey(x => x.RoleId),
            x => x.HasOne(x => x.User)
            .WithMany()
            .HasForeignKey(x => x.UserId));

            entity.HasOne(x => x.CreatedByNavigation).WithMany(x => x.UsersCreatedByNavigations).HasForeignKey(x => x.CreatedBy);
            entity.HasOne(x => x.UpdatedByNavigation).WithMany(x => x.UsersUpdatedByNavigations).HasForeignKey(x => x.UpdatedBy);

            entity.HasOne(d => d.Company).WithMany(p => p.Users)
                .HasForeignKey(d => d.CompanyId);
        });
        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RoleId }).HasName("PK__UserRole__AF2760AD33D9B813");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserRoles__Compa__36B12243");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.UserRoleCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__UserRoles__Creat__38996AB5");

            entity.HasOne(d => d.Role).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserRoles__RoleI__35BCFE0A");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.UserRoleUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__UserRoles__Updat__398D8EEE");

            entity.HasOne(d => d.User).WithMany(p => p.UserRoleUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserRoles__UserI__34C8D9D1");
        });

        modelBuilder.Entity<UsersToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UsersTok__3214EC07DAA9ECF5");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.Token).HasMaxLength(500);
        });

        modelBuilder.Entity<WareHouse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WareHous__3214EC074F41662F");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.MaxStock).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinStock).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.WareHouses)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__Compa__49C3F6B7");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WareHouseCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__WareHouse__Creat__4BAC3F29");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.WareHouseUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__WareHouse__Updat__4CA06362");
        });

        modelBuilder.Entity<WareHouseEntrance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WareHous__3214EC07A93F22CE");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.WareHousesEntrances)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__Compa__245D67DE");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WareHousesEntranceCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__WareHouse__Creat__2645B050");

            entity.HasOne(d => d.Product).WithMany(p => p.WareHousesEntrances)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__Produ__236943A5");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.WareHousesEntranceUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__WareHouse__Updat__2739D489");

            entity.HasOne(d => d.WareHouse).WithMany(p => p.WareHousesEntrances)
                .HasForeignKey(d => d.WareHouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__WareH__22751F6C");
        });

        modelBuilder.Entity<WareHouseExit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WareHous__3214EC07BD0AA284");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.WareHousesExits)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__Compa__2BFE89A6");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WareHousesExitCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__WareHouse__Creat__2DE6D218");

            entity.HasOne(d => d.Product).WithMany(p => p.WareHousesExits)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__Produ__2B0A656D");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.WareHousesExitUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__WareHouse__Updat__2EDAF651");

            entity.HasOne(d => d.WareHouse).WithMany(p => p.WareHousesExits)
                .HasForeignKey(d => d.WareHouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__WareH__2A164134");
        });

        modelBuilder.Entity<WareHouseTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WareHous__3214EC07AE12C4BA");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Company).WithMany(p => p.WareHousesTransfers)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__Compa__3493CFA7");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.WareHousesTransferCreatedByNavigations)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK__WareHouse__Creat__367C1819");

            entity.HasOne(d => d.Product).WithMany(p => p.WareHousesTransfers)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__Produ__339FAB6E");

            entity.HasOne(d => d.ToWareHouse).WithMany(p => p.WareHousesTransferToWareHouses)
                .HasForeignKey(d => d.ToWareHouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__ToWar__32AB8735");

            entity.HasOne(d => d.UpdatedByNavigation).WithMany(p => p.WareHousesTransferUpdatedByNavigations)
                .HasForeignKey(d => d.UpdatedBy)
                .HasConstraintName("FK__WareHouse__Updat__37703C52");

            entity.HasOne(d => d.WareHouse).WithMany(p => p.WareHousesTransferWareHouses)
                .HasForeignKey(d => d.WareHouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WareHouse__WareH__31B762FC");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}